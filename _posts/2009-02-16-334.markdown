---
layout: post
title: "Букмарклеты"
tags:
  - JavaScript
  - Bookmarklet
---

Всем привет, сегодня речь пойдет про использование букмарклета, или закладки для браузера.

Кто не&nbsp;знает, это такая штука, которую можно добавить в&nbsp;закладки (да,&nbsp;я&nbsp;сегодня дебютирую в&nbsp;роли Капитана Очевидность :) и,&nbsp;при нажатии на&nbsp;нее, произвести какой-нибудь эффект.

Примером может служить герой сегодняшней заметки, который расположен по&nbsp;адресу [http://ulizko. com/demo/allthat/](http://ulizko.com/demo/allthat/). Инструкция по&nbsp;применению:

* Перетащите ссылку &laquo;link&raquo; на&nbsp;панель закладок или щелкните по&nbsp;ней правой кнопкой мыши и&nbsp;выберите пункт меню &laquo;добавить в&nbsp;избранное&raquo;.
* Зайдите на&nbsp;какой-нибудь сайт, вроде [http://twitter.com](http://twitter.com), и&nbsp;нажмите на&nbsp;эту закладку (ну&nbsp;или на&nbsp;избранное).

<p>Появится окошко, в&nbsp;которое можно ввести данные. Вообще, предполагается, что это будет интерфейс добавления желаний в&nbsp;вишлисты (предварительно созданные на&nbsp;каком-то сайте), настроить триггеры оповещений, и&nbsp;прочее. Есть даже какая-то валидация начального уровня. И&nbsp;налажен обмен данными с&nbsp;сервером&nbsp;&#8212; то&nbsp;есть, на&nbsp;любом домене к&nbsp;вам приходит список ваших вишлистов, а&nbsp;ваше новое желание с&nbsp;любого домена долетит на&nbsp;крыльях любви к&nbsp;вишлисту и&nbsp;уютно устроится в&nbsp;его объятьях<sup><a href="#footnotes_wtf">1</a></sup>.</p>

Но. Мы&nbsp;сегодня не&nbsp;об&nbsp;этом, а&nbsp;о&nbsp;том, как делать такие штуки в&nbsp;принципе.

Прежде чем перейти непосредственно к&nbsp;разбору кода, хотелось&nbsp;бы ответить на&nbsp;вопрос (который мне никто не&nbsp;задавал :), а именно, &quot;Какие возможности дает букмарклет?&quot;. Правильный ответ&nbsp;&#8212; любые. Так как мы&nbsp;получаем возможность подгрузить любой скрипт, мы&nbsp;можем сделать с&nbsp;клиентской страничкой все, что угодно. Например&nbsp;&#8212; сделать &laquo;выносной&raquo; виджет, в&nbsp;котором на&nbsp;любой страничке можно будет добавить запись в&nbsp;блокнот или таскменджер. Или вообще сделать весь таскменеджер выносным. Что тоже важно, они будут работать практически везде&nbsp;&#8212; это не&nbsp;плагины к&nbsp;firefox&#146;у&nbsp;и&nbsp;не виджеты к&nbsp;opera. Букмарклетам не&nbsp;важно (ну,&nbsp;почти :), какая у&nbsp;вас ОС&nbsp;или браузер. В&nbsp;общем, есть простор для фантазии.

Итак, как&nbsp;же делать эти самые букмарклеты?

Очень просто: надо создать на&nbsp;страничке элемент anchor с&nbsp;атрибутом href, содержащим javascript-код. Если перевести на&nbsp;русский, то&nbsp;надо сделать вот такую ссылку, адрес которой, по&nbsp;большому счету, и&nbsp;будет букмарклетом:

{% highlight html %}
<a href="javascript:alert('I am bookmarklet'); void 0;">Bookmarklet</a>
{% endhighlight %}

Демо:

<p><a href="javascript:alert('I am bookmarklet'); void 0;">Демо вышеописанного кода</a></p>

<p>Для того, чтобы javascript код в&nbsp;адресе ссылки заработал, надо добавить перед ним слово <code>javascript:</code>. По&nbsp;умному это называется &laquo;указание псевдопротокола javascript&raquo;. Еще одна важная деталь&nbsp;&#8212; если ваш код вернет какое-то значение, то&nbsp;браузер воспримет его в&nbsp;качестве адреса, по&nbsp;которому нужно перейти, и&nbsp;уйдет с&nbsp;текущей страницы. Чтобы избежать этого, не&nbsp;возвращайте значения, то&nbsp;есть допишите в&nbsp;конец скрипта <code>void 0;</code>, либо оберните весь код в&nbsp;анонимную функцию, невозвращающую значения&nbsp;&#8212; <code>(function(){... ваш код мог бы быть здесь...})()</code>.</p>

В любом случае, все эти вопросы подробно рассмотрены у&nbsp;Ильи Кантора в&nbsp;его заметке [Букмарклеты и&nbsp;правила их&nbsp;написания](http://javascript.ru/unsorted/bookmarklet), к&nbsp;которой я&nbsp;вас и&nbsp;отсылаю за&nbsp;подробностями.

Единственную вещь, которую нам еще нужно знать&nbsp;&#8212; это то,&nbsp;что все браузеры ограничивают максимальную длину кода букмарклета. И,&nbsp;подобно тому, как скорость каравана равна скорости самого медленного верблюда, так и&nbsp;максимальный размер кроссбраузерного букмарклета равен ограничению, наложенному IE&nbsp;6&nbsp;SP2, то&nbsp;есть, 488&nbsp;символам.

Таким образом, вряд&nbsp;ли мы&nbsp;сможем закодить какую-то комплексную логику в&nbsp;неполных пятистах символах, так что чаще всего букмарклеты просто создают новый тэг script, в&nbsp;который уже сгружают код приложения.

Так поступил и&nbsp;я.&nbsp;Вот код моего букмарклета в&nbsp;человекоадаптированном виде:

{% highlight javascript linenos %}
(function () {
    // создаем новую внутреннюю переменную a (лучше в данном случае использовать короткие идентификаторы)
    // и сразу же добавляем свой объект в глобальный объект window, и записываем в него данные, которые уникальны
    // для каждого пользователя (ведь они сгенерированы сервером для пользователя перед тем, как он добавил этот букмарклет к себе)
    var a = window.allThat = { 
        userId : '123345456',
        server : 'http://mysite.com/',
        script : document.createElement('script'), // создадим и запомним тэг скрипт, 
        // который сгрузит нам код нашего приложения - мы его потом удалим, если пользователь нажмет кнопку "закрыть"
        css : document.createElement('link')
    },
    /* динамически создаем элементы: */
    h = document.getElementsByTagName('head')[0];
    a.css.rel = 'stylesheet';
    a.css.href = a.server + 'css/bookmarklet.2.css';
    h.appendChild(a.css);
    a.script.src = a.server + 'js/bookmarklet.7.js';
    h.appendChild(a.script);
    h=null;
})();
{% endhighlight %}

Потом подгружается непосредственно код самого окошка. Думаю, он&nbsp;может представлять некий интерес сам по&nbsp;себе, так что и&nbsp;его я&nbsp;сюда запощу (все комментарии идут на&nbsp;английском, так как заказчик американец):

{% highlight javascript linenos %}
(function () {
var Dom = {
    get : function (el) { 
        return (el && el.nodeType) ? el : document.getElementById(el); 
    },
    addListener : function (el, type, fn) { 
            if (document.body.addEventListener) { 
                return function (el, type, fn) { 
                    el.addEventListener(type, fn, false); 
                }; 
            } else if (document.body.attachEvent) { 
                return function (el, type, fn) { 
                    el.attachEvent('on' + type, fn); 
                }; 
            } else { 
                return function (el, type, fn) { 
                    el['on' + type] = fn; 
                }; 
            } 
        }(),
    removeListener : function (el, type, fn) { 
            if (document.body.removeEventListener){ 
                return function (el, type, fn) { 
                    el.removeEventListener(type, fn, false); 
                }; 
            } else if (document.body.detachEvent) { 
                return function (el, type, fn) { 
                    el.detachEvent('on' + type, fn); 
                }; 
            } else { 
                return function (el, type, fn) { 
                    el['on' + type] = function () { return true; }; 
                }; 
            } 
        }(),
    hide : function (el) {
        el.style.display = 'none';
    },
    show : function (el) {
        el.style.display = '';
    }
},

allThat = window.allThat;

allThat.Bookmarklet = function () {
    // where to send user data and where from take wishlists list
    var wishlistsLocation = allThat.server + 'wishlists/',
    sendTo = allThat.server + 'wishes/',

    // bookmarklet window html code
    innerHTML = '<div id="allthat-wish"><div class="allthat-saving" id="allthat-throbber">saving...</div><div id="allthat-logo"><span>AllThat</span></div><button title="close" id="allthat-close"><span>close</span></button><h1><span>Add To Wishlist</span></h1><form action=""><div class="allthat-field"><label for="allthat-product">Product Name:</label><br /><input type="text" name="product" value="(Ex: Black iPhone Adapter)" class="allthat-sample-value" id="allthat-product" /></div>	<div class="allthat-field"><label for="allthat-wishlist">Add to List:</label><br /><select name="wishlist" id="allthat-wishlist"></select></div><fieldset id="allthat-low-price">	<h2>Low Price Alerts!</h2>			<div class="allthat-field" id="allthat-range"><label for="allthat-minprice">How much would you like to pay?</label><br /><input type="text" name="minprice" value="(min)" class="allthat-sample-value" id="allthat-minprice" />to<input type="text" name="maxprice" value="(max)" class="allthat-sample-value" id="allthat-maxprice" /></div><h3>Alert me via:</h3><fieldset id="allthat-alerts"><input type="checkbox" name="email" id="allthat-email" /><label for="allthat-email" id="allthat-email-label">Email</label><br /><input type="checkbox" name="sms" id="allthat-sms" /><label for="allthat-sms" id="allthat-sms-label">SMS</label><br /><input type="checkbox" name="twitter" id="allthat-twitter" /><label for="allthat-twitter" id="allthat-twitter-label">Twitter</label><br /><select name="frequency" id="allthat-frequency"><option value="0" selected="selected">-- Alert Frequency --</option><option value="1">Daily</option><option value="7">Weekly</option><option value="30">Monthly</option></select></fieldset></fieldset><button title="Add" id="allthat-add"><span>Add</span></button></form><div id="allthat-errors" style="color:red;"/></div>',

    // dom elements:
    container = document.createElement('div'),
    errorDiv,
    alertFrequencyDropdown,
    wishlistsDropdown,
    wishlistsWrapper,
    savingThrobber,
    closeButton,
    titleInput,
    minPriceInput,
    maxPriceInput,
    sendButton,
    alerts = {},
    scripts = [],

    // input default values:
    titleDefaultValue = '(Ex: Black iPhone Adapter)',
    minPriceDefaultValue = '(min)',
    maxPriceDefaultValue = '(max)',

    // errors array - used for validation
    errors = [],
    errorMessages = {
        titleEmpty : 'Please enter product name',
        wishlistNotSelected : 'Please chose list',
        frequencyNonSelected : 'Please chose alert frequency'
    };

    // append bookmarklet window html to the target page
    function createTemplate () {
        container.innerHTML = innerHTML;
        document.body.appendChild(container);
    };
    // initialize javascript references to the Dom elements
    function initializeDomElementsReferences () {
        errorDiv = Dom.get('allthat-errors');
        alertFrequencyDropdown = Dom.get('allthat-frequency');
        wishlistsDropdown = Dom.get('allthat-wishlist');
        wishlistsWrapper = wishlistsDropdown.parentNode;
        savingThrobber = Dom.get('allthat-throbber');
        closeButton = Dom.get('allthat-close');
        titleInput = Dom.get('allthat-product');
        minPriceInput = Dom.get('allthat-minprice');
        maxPriceInput = Dom.get('allthat-maxprice');
        sendButton = Dom.get('allthat-add');
        alerts.email = Dom.get('allthat-email');
        alerts.sms = Dom.get('allthat-sms');
        alerts.twitter = Dom.get('allthat-twitter');
    };
    // disable wishlist dropdown before server response with wishlists array doesn't arrive
    function initializeGUI () {
        wishlistsDropdown.disabled = 'disabled';
        wishlistsDropdown.style.width = '90%';
        wishlistsWrapper = wishlistsDropdown.parentNode;
        wishlistsWrapper.style.background = 'transparent url(' + allThat.server + 'images/bookmarklet/ajax-loader-blue.gif) no-repeat right';
        Dom.hide(savingThrobber);
    };
    // bind event listeners to the controls
    function attachListeners () {
        Dom.addListener(closeButton, 'click', destroy);
        Dom.addListener(titleInput, 'focus', function () {if (titleInput.value == titleDefaultValue) activateInput(titleInput);});
        Dom.addListener(minPriceInput, 'focus', function () {if (minPriceInput.value == minPriceDefaultValue) activateInput(minPriceInput);});
        Dom.addListener(maxPriceInput, 'focus', function () {if (maxPriceInput.value == maxPriceDefaultValue) activateInput(maxPriceInput);});
        Dom.addListener(sendButton, 'click', function (e) { e = e || window.event; if (e.preventDefault) e.preventDefault(); addItemToList(); return false;});
    };

    // validators
    function validateItemTitlePresence () {
        var t = titleInput.value;
        if (t.replace(/^s+|s+$/, '').length == 0 || t == titleDefaultValue) errors.push(errorMessages.titleEmpty);
    };

    function validateWishlistPresence () {
        if (typeof wishlistsDropdown.value === 'undefined') errors.push(errorMessages.wishlistNotSelected);
    };

    function validateFrequencyPresence () {
        for (var alert in alerts) { 
            if (alerts[alert].checked && alertFrequencyDropdown.value == 0) {
                errors.push(errorMessages.frequencyNonSelected); 
                return;
            }
        }
    };

    function validate () {
        errors.length = 0;
        validateItemTitlePresence();
        validateWishlistPresence();
        validateFrequencyPresence();
        return errors.length == 0;
    };

    function displayErrors () {
        var output = '', error, i = 0;
        while (error = errors[i++]) {
            output += error + '<br/>';
        }

        errorDiv.innerHTML = output;
    };

    // this function called if user clicks on the 'send' button
    // so that we need to validate data, and, if it's all ok,
    // send request to server. Also, we show throbber and setup callback which would stop it
    function addItemToList () {
        if (validate()) {
            sendItemOnServer();
        }
        displayErrors();
    };

    // serialize data into string, show loader and call sendRequest method
    function sendItemOnServer () {
        var data = 'title=' + encodeURIComponent(titleInput.value) + '&wishlist=' + wishlistsDropdown.value;

        var temp = minPriceInput.value;
        data += (temp == '' || temp == minPriceDefaultValue) ? '' : ('&minPrice=' + temp);
        temp = maxPriceInput.value;
        data += (temp == '' || temp == maxPriceDefaultValue) ? '' : ('&maxPrice=' + temp);

        data += '&alerts=[';
        for (var alert in alerts) { 
            var a = alerts[alert];
            if (a.checked) {
                data += a.name;
            }
        }
        data += ']';
        data += '&alertFrequency=' + alertFrequencyDropdown.value;

        showLoader();
        sendRequest(sendTo, data, 'itemAdded');
    };

    // clear inputs
    function clearFields () {
        hideLoader();
        activateInput (titleInput);
        activateInput (minPriceInput);
        activateInput (maxPriceInput);
        for (var alert in alerts) alerts[alert].checked = false;
    };

    // misc - remove default value and make font color black
    function activateInput (el) {
        el.className = '';
        el.value = '';
    };

    // feed wishlists dropdown with data and enable it
    function activateWhishlistsDropdown (response) {
        var w = response.wishlists, 
            i = 0, 
            wishlist, 
            opt;
        while(wishlist = w[i++]) {
            opt = document.createElement("option");
			opt.appendChild(document.createTextNode(wishlist.title));
			opt.setAttribute("value", wishlist.id);
			wishlistsDropdown.appendChild(opt);
        }
        wishlistsDropdown.disabled = false;
        wishlistsDropdown.style.width = '100%';
        wishlistsWrapper.style.background = '';
    };

    // remove every track of bookmarklet from the page
    function destroy () {
        removeEventListeners();
        removeDOMReferences();
        container.parentNode.removeChild(container);
        container = null;
        allThat.css.parentNode.removeChild(allThat.css);
        allThat.script.parentNode.removeChild(allThat.script);
        allThat = null;
    };
    // to prevent memory leaks on ie6 - remove all js to dom references
    function removeDOMReferences () {
        errorDiv = null;
        alertFrequencyDropdown = null;
        wishlistsDropdown = null;
        wishlistsWrapper = null;
        savingThrobber = null;
        closeButton = null;
        titleInput = null;
        minPriceInput = null;
        maxPriceInput = null;
        sendButton = null;
        alerts.email = null;
        alerts.sms = null;
        alerts.twitter = null;
        var i = scripts.length - 1, script, head = document.getElementsByTagName('head')[0];
        while (script = scripts[i--]) {
            head.removeChild(script);
            script = null;
            scripts[i + 1] = null;
        }
        scripts.length = null;
    };
    // to prevent memory leaks - remove all event listeners
    function removeEventListeners () {
        Dom.removeListener(closeButton, 'click', destroy);
        Dom.removeListener(titleInput, 'focus', function () {if (titleInput.value == titleDefaultValue) activateInput(titleInput);});
        Dom.removeListener(minPriceInput, 'focus', function () {if (minPriceInput.value == minPriceDefaultValue) activateInput(minPriceInput);});
        Dom.removeListener(maxPriceInput, 'focus', function () {if (maxPriceInput.value == maxPriceDefaultValue) activateInput(maxPriceInput);});
        Dom.removeListener(sendButton, 'click', function (e) { e = e || window.event; if (e.preventDefault) e.preventDefault(); addItemToList(); return false;});
    };

    // create dynamic script element and remove it immediately after it load
    function sendRequest (url, data, callback) {
        var head = document.getElementsByTagName('head')[0],
            script = document.createElement('script'),
            noCacheIE = '&noCacheIE=' + (new Date()).getTime(),
            fullUrl = url + '?callback=' + encodeURIComponent(callback) + '&userId=' + allThat.userId+ ((data) ? ('&' + data) : '') + noCacheIE;

        script.setAttribute('type', 'text/javascript');
        script.setAttribute('src', fullUrl);
        script.setAttribute('charset', 'utf-8');

        head.appendChild(script);
        scripts.push(script);
        head = null;
    };

    // misc - hide send button and show saving throbber instead
    function showLoader () {
        Dom.show(savingThrobber);
        Dom.hide(sendButton);
    };
    // misc - hide saving throbber and show send button instead
    function hideLoader () {
        Dom.hide(savingThrobber);
        Dom.show(sendButton);
    };

    return {
        initialize : function () {
            createTemplate();
            initializeDomElementsReferences();
            initializeGUI();
            attachListeners();
            sendRequest(wishlistsLocation, null, 'loadWishlists');
        },

        destroy : function () {
            destroy();
        },

        loadWishlists : activateWhishlistsDropdown,

        itemAdded : clearFields
    };
}();

// to prevent memory leaks, remove all js <-> dom references, including dom elements references and event listeners
Dom.addListener(window, 'unload', function () {
    if (allThat) allThat.Bookmarklet.destroy();
    Dom.removeListener(window, 'unload', arguments.callee);
});


allThat.Bookmarklet.initialize(); // show bookmarklet - this is visual start of the application

})();
{% endhighlight %}

**Примечания**:

<ul class="footnotes">
    <li id="footnotes_wtf">Вообще скрипт выполнен мной на заказ в рамках моей фрилансерской деятельности, так что не удивляйтесь идее, логотипам и дизайну. </li>
</ul>