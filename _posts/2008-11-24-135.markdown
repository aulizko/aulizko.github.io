---
layout: post
title: "Back-button problem"
permalink: /posts/135/index.html
tags:
  - JavaScript
---
There are plast of different problems when you creating ajax-based RIA.
Most popular is, in my opinion, so called 'back-button problem'. 

Here I share my solution of this problem, hope it will help you.


The idea is very simple - all dynamic content on your page load by special function (I called that method <code>loadPage</code> at <code>PageFlow</code> object). This method accept hash as param, so that if user clicks on the link which <code>href</code> is anchor, and someone else invocate this method with that anchor as param, your this method will load appropriate data. Of course, we need cover case when user just came from the another page to the root of our application so that there is no one hash param and load 'default' data.


Assume, you use <a href="http://jquery.com/">jQuery</a> as javascript framework and you develop usual e-commerce site which has whole list of goods and details view of goods item.


The main object, called History, store <code>callback</code> function and can store history of location.hash changes. When hash changes (user clicks on the 'forward' or 'backward' button or on the links on your page) History Object will invocate callback function with <code>hash</code> as param:

{% highlight javascript linenos %}
/**
 * History managment, for ajax-based pages
 * @class History
 * @constructor
 */
History = function () {
   var
   /**
    * @property currentHash
    * @private
    */
   currentHash,
   /**
    * @property _callback
    * @private
    */
   _callback,

   historyBackStack,

   historyForwardStack,

   isFirst,

   dontCheck,

   check = function () {
       var i, hash;
       if($.browser.msie) {
           // On IE, check for location.hash of iframe
           var ihistory = $("#APHistory")[0];
           var iframe = ihistory.contentDocument || ihistory.contentWindow.document;
           hash = iframe.location.hash;
           if(hash != currentHash) {

               location.hash = hash;
               currentHash = hash;
               _callback(hash.replace(/^#/, ''));

           }
       } else if ($.browser.safari) {
           if (dontCheck) {
               var historyDelta = history.length - historyBackStack.length;

               if (historyDelta) { // back or forward button has been pushed
                   isFirst = false;
                   if (historyDelta < i =" 0;" i =" 0;" cachedhash =" historyBackStack[historyBackStack.length" currenthash =" location.hash;">= 0) {
                       _callback(document.URL.split('#')[1]);
                   } else {
                       _callback('');
                   }
                   isFirst = true;
               }
           }
       } else {
           // otherwise, check for location.hash
           hash = location.hash;
           if(hash != currentHash) {
               currentHash = hash;
               _callback(hash.replace(/^#/, ''));
           }
       }
   };

   return {
       initialize : function (callback) {
           _callback = callback;
           currentHash = location.hash;

           if ($.browser.msie) {
               // To stop the callback firing twice during initilization if no hash present
               if (currentHash == '') {
                   currentHash = '#';
               }

               // add hidden iframe for IE
               $("body").prepend('<iframe id="APHistory" style="display: none;"></iframe>');
               var iframe = $("#APHistory")[0].contentWindow.document;
               iframe.open();
               iframe.close();
               iframe.location.hash = currentHash;
           } else if ($.browser.safari) {
               // etablish back/forward stacks

               historyBackStack = [];
               historyBackStack.length = history.length;
               historyForwardStack = [];
               isFirst = true;
               dontCheck = false;
           }
           _callback(currentHash.replace(/^#/, ''));
           setInterval(check, 100);
       },

       add : function (hash) {
           // This makes the looping function do something
           historyBackStack.push(hash);

           historyForwardStack.length = 0; // clear forwardStack (true click occured)
           isFirst = true;
       },

       /**
        *
        * @param hash {String} desiring hash without first #
        */
       load: function(hash) {
           var newhash;

           if ($.browser.safari) {
               newhash = hash;
           } else {
               newhash = '#' + hash;
               location.hash = newhash;
           }
           currentHash = newhash;

           if ($.browser.msie) {
               var ihistory = $("#APHistory")[0]; // TODO: need contentDocument?
               var iframe = ihistory.contentWindow.document;
               iframe.open();
               iframe.close();
               iframe.location.hash = newhash;
               _callback(hash);
           }
           else if ($.browser.safari) {
               dontCheck = true;
               // Manually keep track of the history values for Safari
               this.add(hash);

               // Wait a while before allowing checking so that Safari has time to update the "history" object
               // correctly (otherwise the check loop would detect a false change in hash).
               var fn = function() {AP.History.setCheck(false);};

               window.setTimeout(fn, 200);

               _callback(hash);
               // N.B. "location.hash=" must be the last line of code for Safari as execution stops afterwards.
               //      By explicitly using the "location.hash" command (instead of using a variable set to "location.hash") the
               //      URL in the browser and the "history" object are both updated correctly.
               location.hash = newhash;
           }
           else {
             _callback(hash);
           }
       },

       /**
        * Set need we check, or not.
        * @param check {Boolean}
        * @protected
        */
       setCheck : function (check) {
           dontCheck = check;
       },

       /**
        * @method getCurrentHash
        * @return {String}
        */
       getCurrentHash : function () {
           return currentHash;
       }
   };
}();
{% endhighlight %}

PageFlow object, that I describe above looks like this:

{% highlight javascript linenos %}
/**
 * Page Flow controller - load hash-specific data, show appropriate container and all that
 * @Class PageFlow
 */
var PageFlow = function () {
   /**
    * show whole list of goods
    * @method loadListOfGoods
    * @private
    */
   loadListOfGoods = function () {
       $('#goodsItemDetails').css('display', 'none');
       $('#listOfGoodsWorkArea').css('display', 'block');
   },
   /**
    * show detailed goods item view
    * @method loadGoodsItemDetails
    * @private
    */
   loadGoodsItemDetails = function (id) {
       var item = M.ListOfGoods.getGoodsItemById(id);
       if (item.pluralizedProfit.length == 0) {
           item.pluralizedProfit = item.pluralizedPrice;
       }
       // fill container with appropriate data
       M.Renderer.renderGoodsItemDetails([item]);
       // show goodsItemDetails
       $('#goodsItemDetails').css('display', 'block');
       $('#listOfGoodsWorkArea').css('display', 'none');
   },

   return {
       /**
        * decide what page to load
        * @method loadPage
        * @param pageName {String|Number} location.hash with stripped `#` sign
        * @public
        */
       loadPage : function (pageName) {
           if (L.isUndefined(pageName)) {
               if (M.ClientURI.isMainPage()) {
                   loadListOfGoods();
               }
           }
           // if pageName is number
           if (L.isNumber(pageName) || pageName.replace(/\d+/, '').length == 0) {
               // need to load goods item details page with provided id
               loadGoodsItemDetails(pageName);
           } else {
               switch (pageName) {
                   case 'all':
                       loadListOfGoods();
                       break;
               }
           }
       }
   };
}();
{% endhighlight %}

That is almost the end, only two things left:

1. initialize <code>History</code> object with <code>loadPage</code> method of <code>PageFlow</code> object
2. change default behavior of the links - they must invocate <code>load</code> method of <code>History</code> object instead of send user to anchor location area

{% highlight javascript linenos %}
$(function () {
   $('a @rel=[history]').click(function () {
       History.load(this.href.replace(/^.*#/, ''));
       return false;
   });

   History.initialize(PageFlow.loadPage);
});
{% endhighlight %}